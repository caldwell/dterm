#!/usr/bin/ruby
# Copyright (c) 2006 David Caldwell. All rights reserved.
require "socket"
require "fcntl"

FILTER_CHAR = "\001";

class IO
  def filter()  @filtered = true; end
  def filtered?() return @filtered; end
  def add_filtered_output(s_in)
    s = s_in.dup
    @looking_for = @looking_for || FILTER_CHAR
    filter_out = "";
    # Four cases: _=unfiltered data, S=FILTER_CHAR, T=\n, .=filtered data
    #  1) __S.....T__
    #  2) __S..
    #  3) .....
    #  4) ....T__
    # Note: we strip the filter char but not the terminating \n (not very symmetric)
    if @looking_for == '\n' && s.sub!(/^(.*\n)/,"") # case 4
      filter_out += $1
      @looking_for = FILTER_CHAR
    end
    if @looking_for == '\n' # case 3
      filter_out += s;
      s = "";
    else
      while s.sub!(/#{FILTER_CHAR}([^\n]+\n)/,"") # case 1
        filter_out += $1;
      end

      if @looking_for == FILTER_CHAR && s.sub!(/#{FILTER_CHAR}(.*)$/,"") # case 2
        filter_out += $1
        @looking_for = '\n';
      end
    end
    add_output(filtered?() ? filter_out : s)
  end
end

class IO
  def add_output(s)
    @pending_out = "" unless defined? @pending_out;
    @pending_out += s
  end
  def send_pending()
    begin
      wrote = syswrite(@pending_out)
      @pending_out = @pending_out[wrote, @pending_out.length-wrote]
    rescue
    end
  end
  @pending_out = "";
  def pending?()
    return @pending_out != nil && @pending_out != ""
  end
end

class IO
  def set_nonblock()
    flags = fcntl(Fcntl::F_GETFL)
    flags |= File::NONBLOCK
    fcntl(Fcntl::F_SETFL, flags)
  end
end

class History
  def initialize(size=10*1024) @size = size;      clear(); end
  def get()                    return @history;            end
  def clear()                  @history = "";              end
  def add(s)
    @history += s;
    @history = @history[-@size,@size] if @history.length > @size;
  end
end

history = History.new();

serial_dev = ARGV.shift || "/dev/ttyS0";
speed  = ARGV.shift || 115200;

serial = open(serial_dev, "r+");
system "stty raw -echo parmrk ispeed #{speed} ospeed #{speed} <#{serial_dev} >#{serial_dev} 2>&1";

server = TCPserver.open(10000)
filter = TCPserver.open(10001)
addr = server.addr
addr.shift
printf("server is on %s\n", addr.join(":"))
socks = [server,filter,serial]
writers = []

serial.set_nonblock();

# Telnet constants
IAC = "\xff"; DONT = "\xfe"; DO = "\xfd"; WILL = "\xfb"; WONT = "\xfc"; SB = "\xfa"; ECHO = "\x01"; SUPP = "\x3"; NAWS = "\x1f"; LINE = "\x22"; SE = "\xf0";

loop do
  writers = [];
  for s in socks
    writers.push(s) if s.pending?()
  end
  nsock = select(socks, writers);
  next if nsock == nil
  for s in nsock[0] # ready for read
    if s == server || s == filter
      ns = s.accept

      ns.filter() if s == filter
      ns.set_nonblock();
      ns.write(IAC+DO+ECHO);
      ns.write(IAC+WILL+ECHO);
      ns.write(IAC+DO+SUPP);
      ns.write(IAC+WILL+SUPP);
      #ns.write(IAC+DO   +NAWS);
      ns.write(IAC+DONT+ LINE);
      ns.write(IAC+WONT+LINE);
      ns.sync=TRUE
      ns.add_filtered_output(history.get())

      socks.push(ns)
      print(s, " is accepted\n")
    elsif s == serial
      str = s.read(100);
      history.add(str);
      for o in socks
        if (o != serial && o != server && o != filter)
          o.add_filtered_output(str)
        end
      end
    else
      if s.eof?
        s.close
        socks.delete(s)
      elsif str = s.read(1000)
        str.gsub!(/#{IAC+IAC}/,IAC) # escape
        str.gsub!(/#{IAC}[#{WILL+WONT+DO+DONT}]./,"")
        str.gsub!(/\x0d\x00/,"\x0d") # telnet sends CR NULL?
        if str=~/#{IAC}/
          printf("Bad telnet escape: %s\n", (str.split(//).collect {|s| s[0] }).join(","));
          exit
        end
        serial.add_output(str);
      end
    end
  end
  for s in nsock[1] # ready for write
    s.send_pending;
  end
end
